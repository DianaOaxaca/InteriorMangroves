{"title":"Core microbiome","markdown":{"yaml":{"title":"Core microbiome"},"headingText":"Load libraries and prepare data","containsRefs":false,"markdown":"\n\n\n```{r}\n#| label: libraries\n#| message: false\n#| warning: false\n# load libraries\nlibrary(phyloseq)\nlibrary(dplyr)\nlibrary(UpSetR)\n```\n\n```{r}\n#load data\nphyseq_qiime3 <- readRDS(\"rds/compare_mangroves/physeq_qiime3.rds\")\n```\n\n```{r}\n# Rename mangrove system columna\ncolnames(sample_data(physeq_qiime3))[colnames(sample_data(physeq_qiime3)) == \"Mangrove system\"] <- \"Mangrove_system\"\n\n# Convert Mangrove_system to factor\nsample_data(physeq_qiime3)$Mangrove_system <- as.factor(sample_data(physeq_qiime3)$Mangrove_system)\n```\n\n## 01. Calculate core\n\n```{r}\n#| label: calculate core\n#| echo: true\n# Prevalence threshold\nprevalence_threshold <- 0.8\n\n# Storage ASVs core list\ncore_list <- list()\nlocations <- levels(sample_data(physeq_qiime3)$Mangrove_system)\n\n# Calculate core\nfor (loc in locations) {\n  # Filter samples by mangrove system\n  physeq_loc <- prune_samples(sample_data(physeq_qiime3)$Mangrove_system == loc, physeq_qiime3)\n  n_samples_loc <- nsamples(physeq_loc)\n\n  # Extract OTU table\n  otu <- as(otu_table(physeq_loc), \"matrix\")\n\n  # Calc prevalence\n  prevalence <- rowSums(otu > 0) / n_samples_loc\n\n  # Identify ASVs with prevalence >= umbral\n  core_taxa <- names(prevalence)[prevalence >= prevalence_threshold]\n\n  # Guardar en la lista\n  core_list[[loc]] <- core_taxa\n}\n\n# Show ASVs core by mangrove system\nprint(lapply(core_list, length))\n\n# checkpoint,if empty try threshold = 1\nif (all(sapply(core_list, length) == 0)) {\n  cat(\"Try prevalence = 1...\\n\")\n  prevalence_threshold <- 1.0\n  core_list <- list()\n  for (loc in locations) {\n    physeq_loc <- prune_samples(sample_data(physeq_qiime3)$Mangrove_system == loc, physeq_qiime3)\n    n_samples_loc <- nsamples(physeq_loc)\n    otu <- as(otu_table(physeq_loc), \"matrix\")\n    prevalence <- rowSums(otu > 0) / n_samples_loc\n    core_taxa <- names(prevalence)[prevalence >= prevalence_threshold]\n    core_list[[loc]] <- core_taxa\n  }\n  print(lapply(core_list, length))\n}\n```\n\n## 02. Extract core info\n\n```{r}\n#| label: core info\n# Unique core ASV list\nall_core_asvs <- unique(unlist(core_list))\n\n# Create matrix presence/absence\ncore_matrix <- matrix(0, nrow = length(all_core_asvs), ncol = length(locations),\n                      dimnames = list(all_core_asvs, locations))\n\n# fill matrix: \nfor (loc in locations) {\n  core_matrix[core_list[[loc]], loc] <- 1\n}\n\n# Convert to data frame to UpSetR\ncore_df <- as.data.frame(core_matrix)\n\n# Create intersection list\nqueries_list <- list()\n```\n\n## 03. plot aesthetics\n\n```{r}\n#library(UpSetR)\n# Fossil Lagoon\nqueries_list <- append(queries_list, list(\n  list(query = intersects, params = list(\"Fossil Lagoon\"), color = \"#A7FCC1\",\n       active = TRUE, query.name = \"Fossil Lagoon\")\n))\n\n# San Pedro River\nqueries_list <- append(queries_list, list(\n  list(query = intersects, params = list(\"San Pedro River\"), color = \"#26B170\",\n       active = TRUE, query.name = \"San Pedro River\")\n))\n\n# Terminos Lagoon\nqueries_list <- append(queries_list, list(\n  list(query = intersects, params = list(\"Términos Lagoon\"), color = \"#329D9C\",\n       active = TRUE, query.name = \"Términos Lagoon\")\n))\n\n# Celestún\nqueries_list <- append(queries_list, list(\n  list(query = intersects, params = list(\"Celestún Lagoon\"), color = \"#41E8D3\",\n       active = TRUE, query.name = \"Celestún Lagoon\")\n))\n\n# Core\nqueries_list <- append(queries_list, list(\n  list(query = intersects, params = list(\"Fossil Lagoon\", \n                                         \"San Pedro River\",\n                                         \"Términos Lagoon\",\n                                         \"Celestún Lagoon\"),\n       color = \"#8D3CA3\", active = TRUE, query.name = \"Core\")))\n\n# Interior\nqueries_list <- append(queries_list, list(\n  list(query = intersects, params = list(\"Fossil Lagoon\", \"San Pedro River\"),\n       color = \"#356E48\", active = TRUE, query.name = \"Interior\")\n))\n\n## Note: due to the fact that there were no unique asvs for coastal, it was not integrated in this selection.\n```\n\n## 04. UpSet plot\n\n```{r}\n#library(UpSetR)\nupset_plot <- upset(core_df,\n                    sets = colnames(core_df),\n                    order.by = \"freq\",\n                    mainbar.y.label = \"Shared ASVs\",\n                    sets.x.label = \"ASVs per Site\",\n                    text.scale = 1.5,\n                    point.size = 4,\n                    line.size = 1.5,\n                    query.legend = \"bottom\",\n                    sets.bar.color = \n                      c(\"#26B170\",\"#A7FCC1\",\"#41E8D3\",\"#329D9C\"),\n                    queries = queries_list)\n\n# show\nprint(upset_plot)\n```\n\nsave plot\n\n```{r}\npdf(\"Figures/SurfaceComparison/core_upset.pdf\", width = 5.8, height = 4)\nupset_plot\ndev.off()\n```\n\n## 05. Get unique and core ASV info\n\n```{r}\n### get unique ASVs per mangrove system\nunique_asvs <- list()\nfor (loc in colnames(core_df)) {\n  unique_asvs[[loc]] <- rownames(core_df)[rowSums(core_df == 1) == 1 & core_df[[loc]] == 1]\n  cat(loc, \": Unique ASVs:\", length(unique_asvs[[loc]]), \"\\n\")\n  print(head(unique_asvs[[loc]], 5))  # Show first 5\n}\n#unique_asvs\n```\n\n```{r}\n# Verify taxonomy\nif (!is.null(tax_table(physeq_qiime3))) {\n  tax_table_df <- as.data.frame(tax_table(physeq_qiime3))\n\n  # Get taxonomy function\n  get_taxonomy <- function(asv_list) {\n    if (length(asv_list) > 0) {\n      taxonomy <- tax_table_df[asv_list, , drop = FALSE]\n      return(taxonomy)\n    } else {\n      return(NULL)\n    }\n  }\n\n  # Get taxonomy\n  taxonomy_unique <- lapply(unique_asvs, get_taxonomy)\n\n  # show first 5  unique ASVs\n  for (loc in names(taxonomy_unique)) {\n    cat(\"\\nFirst unique ASVs taxonomy\", loc, \":\\n\")\n    if (!is.null(taxonomy_unique[[loc]])) {\n      print(head(taxonomy_unique[[loc]], 5))\n    } else {\n      cat(\"There are no unique ASV to\", loc, \"\\n\")\n    }\n  }\n} else {\n  cat(\"Please import taxonomy.\\n\")\n}\n\n# Confirm the total number of unique ASVs\nlapply(taxonomy_unique, function(x) if (!is.null(x)) nrow(x) else 0)\n```\n\nGet taxonomy\n\nPhylum level\n\n```{r}\n# Create a list to store unique asv to Phylum level\nphylum_unique <- list()\n\n# Iterate on each Mangrove system\nfor (loc in names(taxonomy_unique)) {\n  if (!is.null(taxonomy_unique[[loc]])) {\n    # Extract taxonomy phylum\n    tax_df <- taxonomy_unique[[loc]]\n    if (\"Phylum\" %in% colnames(tax_df)) {\n      phylum <- tax_df$Phylum\n      phylum <- phylum[!is.na(phylum)]  # Exclude NA\n      phylum_unique[[loc]] <- unique(phylum)\n    } else {\n      cat(\"Phylum is not available to\", loc, \"\\n\")\n      phylum_unique[[loc]] <- character(0)\n    }\n  } else {\n    phylum_unique[[loc]] <- character(0)\n  }\n}\n\n# Identify exclusive phylum for Mangrove system\nall_phylums <- unique(unlist(phylum_unique))\nphylum_exclusive <- list()\nfor (loc in names(phylum_unique)) {\n  other_locations <- setdiff(names(phylum_unique), loc)\n  other_phylum <- unique(unlist(phylum_unique[other_locations]))\n  exclusive_phylum <- setdiff(phylum_unique[[loc]], other_phylum)\n  phylum_exclusive[[loc]] <- exclusive_phylum\n  cat(\"Exclusive phylum in\", loc, \":\", length(exclusive_phylum), \"\\n\")\n  if (length(exclusive_phylum) > 0) {\n    print(exclusive_phylum)\n  } else {\n    cat(\"There are not exclusive phylum.\\n\")\n  }\n}\n```\n\nFamily level\n\n```{r}\n# Create a list to store unique asv to specific taxonomy level\nfamilies_unique <- list()\n\n# Iterate on each Mangrove system\nfor (loc in names(taxonomy_unique)) {\n  if (!is.null(taxonomy_unique[[loc]])) {\n    # Extract taxonomy families\n    tax_df <- taxonomy_unique[[loc]]\n    if (\"Family\" %in% colnames(tax_df)) {\n      families <- tax_df$Family\n      families <- families[!is.na(families)]  # Exclude NA\n      families_unique[[loc]] <- unique(families)\n    } else {\n      cat(\"Family is not available to\", loc, \"\\n\")\n      families_unique[[loc]] <- character(0)\n    }\n  } else {\n    families_unique[[loc]] <- character(0)\n  }\n}\n\n# Identify exclusive family for Mangrove system\nall_families <- unique(unlist(families_unique))\nfamilies_exclusive <- list()\nfor (loc in names(families_unique)) {\n  other_locations <- setdiff(names(families_unique), loc)\n  other_families <- unique(unlist(families_unique[other_locations]))\n  exclusive_families <- setdiff(families_unique[[loc]], other_families)\n  families_exclusive[[loc]] <- exclusive_families\n  cat(\"Exclusive family in\", loc, \":\", length(exclusive_families), \"\\n\")\n  if (length(exclusive_families) > 0) {\n    print(exclusive_families)\n  } else {\n    cat(\"There are not exclusive family.\\n\")\n  }\n}\n```\n\nGet core table\n\n```{r}\n# Combine taxonomy in data.frame\ntaxonomy_unique_df <- do.call(rbind, lapply(names(taxonomy_unique), function(loc) {\n  if (!is.null(taxonomy_unique[[loc]])) {\n    df <- taxonomy_unique[[loc]]\n    df$Location <- loc\n    df$ASV <- rownames(df)# add name asv column\n    return(df)\n  } else {\n    return(NULL)\n  }\n}))\n\n# Move columns\ntaxonomy_unique_df <- taxonomy_unique_df[, c(\"ASV\", \"Location\", setdiff(names(taxonomy_unique_df), c(\"ASV\", \"Location\")))]\n\n# show first rows of data.frame to verify\nprint(head(taxonomy_unique_df))\n```\n\n```{r}\n# save data.frame\nwrite.csv(taxonomy_unique_df, file = \"Tables/SurfaceComparison/unique_asvs_taxonomy.csv\", row.names = FALSE)\n```\n\n## Save rds core plot\n\n```{r}\nsaveRDS(upset_plot, \"Figures/SurfaceComparison/upset_surface_plot.rds\")\n```\n","srcMarkdownNoYaml":"\n\n## Load libraries and prepare data\n\n```{r}\n#| label: libraries\n#| message: false\n#| warning: false\n# load libraries\nlibrary(phyloseq)\nlibrary(dplyr)\nlibrary(UpSetR)\n```\n\n```{r}\n#load data\nphyseq_qiime3 <- readRDS(\"rds/compare_mangroves/physeq_qiime3.rds\")\n```\n\n```{r}\n# Rename mangrove system columna\ncolnames(sample_data(physeq_qiime3))[colnames(sample_data(physeq_qiime3)) == \"Mangrove system\"] <- \"Mangrove_system\"\n\n# Convert Mangrove_system to factor\nsample_data(physeq_qiime3)$Mangrove_system <- as.factor(sample_data(physeq_qiime3)$Mangrove_system)\n```\n\n## 01. Calculate core\n\n```{r}\n#| label: calculate core\n#| echo: true\n# Prevalence threshold\nprevalence_threshold <- 0.8\n\n# Storage ASVs core list\ncore_list <- list()\nlocations <- levels(sample_data(physeq_qiime3)$Mangrove_system)\n\n# Calculate core\nfor (loc in locations) {\n  # Filter samples by mangrove system\n  physeq_loc <- prune_samples(sample_data(physeq_qiime3)$Mangrove_system == loc, physeq_qiime3)\n  n_samples_loc <- nsamples(physeq_loc)\n\n  # Extract OTU table\n  otu <- as(otu_table(physeq_loc), \"matrix\")\n\n  # Calc prevalence\n  prevalence <- rowSums(otu > 0) / n_samples_loc\n\n  # Identify ASVs with prevalence >= umbral\n  core_taxa <- names(prevalence)[prevalence >= prevalence_threshold]\n\n  # Guardar en la lista\n  core_list[[loc]] <- core_taxa\n}\n\n# Show ASVs core by mangrove system\nprint(lapply(core_list, length))\n\n# checkpoint,if empty try threshold = 1\nif (all(sapply(core_list, length) == 0)) {\n  cat(\"Try prevalence = 1...\\n\")\n  prevalence_threshold <- 1.0\n  core_list <- list()\n  for (loc in locations) {\n    physeq_loc <- prune_samples(sample_data(physeq_qiime3)$Mangrove_system == loc, physeq_qiime3)\n    n_samples_loc <- nsamples(physeq_loc)\n    otu <- as(otu_table(physeq_loc), \"matrix\")\n    prevalence <- rowSums(otu > 0) / n_samples_loc\n    core_taxa <- names(prevalence)[prevalence >= prevalence_threshold]\n    core_list[[loc]] <- core_taxa\n  }\n  print(lapply(core_list, length))\n}\n```\n\n## 02. Extract core info\n\n```{r}\n#| label: core info\n# Unique core ASV list\nall_core_asvs <- unique(unlist(core_list))\n\n# Create matrix presence/absence\ncore_matrix <- matrix(0, nrow = length(all_core_asvs), ncol = length(locations),\n                      dimnames = list(all_core_asvs, locations))\n\n# fill matrix: \nfor (loc in locations) {\n  core_matrix[core_list[[loc]], loc] <- 1\n}\n\n# Convert to data frame to UpSetR\ncore_df <- as.data.frame(core_matrix)\n\n# Create intersection list\nqueries_list <- list()\n```\n\n## 03. plot aesthetics\n\n```{r}\n#library(UpSetR)\n# Fossil Lagoon\nqueries_list <- append(queries_list, list(\n  list(query = intersects, params = list(\"Fossil Lagoon\"), color = \"#A7FCC1\",\n       active = TRUE, query.name = \"Fossil Lagoon\")\n))\n\n# San Pedro River\nqueries_list <- append(queries_list, list(\n  list(query = intersects, params = list(\"San Pedro River\"), color = \"#26B170\",\n       active = TRUE, query.name = \"San Pedro River\")\n))\n\n# Terminos Lagoon\nqueries_list <- append(queries_list, list(\n  list(query = intersects, params = list(\"Términos Lagoon\"), color = \"#329D9C\",\n       active = TRUE, query.name = \"Términos Lagoon\")\n))\n\n# Celestún\nqueries_list <- append(queries_list, list(\n  list(query = intersects, params = list(\"Celestún Lagoon\"), color = \"#41E8D3\",\n       active = TRUE, query.name = \"Celestún Lagoon\")\n))\n\n# Core\nqueries_list <- append(queries_list, list(\n  list(query = intersects, params = list(\"Fossil Lagoon\", \n                                         \"San Pedro River\",\n                                         \"Términos Lagoon\",\n                                         \"Celestún Lagoon\"),\n       color = \"#8D3CA3\", active = TRUE, query.name = \"Core\")))\n\n# Interior\nqueries_list <- append(queries_list, list(\n  list(query = intersects, params = list(\"Fossil Lagoon\", \"San Pedro River\"),\n       color = \"#356E48\", active = TRUE, query.name = \"Interior\")\n))\n\n## Note: due to the fact that there were no unique asvs for coastal, it was not integrated in this selection.\n```\n\n## 04. UpSet plot\n\n```{r}\n#library(UpSetR)\nupset_plot <- upset(core_df,\n                    sets = colnames(core_df),\n                    order.by = \"freq\",\n                    mainbar.y.label = \"Shared ASVs\",\n                    sets.x.label = \"ASVs per Site\",\n                    text.scale = 1.5,\n                    point.size = 4,\n                    line.size = 1.5,\n                    query.legend = \"bottom\",\n                    sets.bar.color = \n                      c(\"#26B170\",\"#A7FCC1\",\"#41E8D3\",\"#329D9C\"),\n                    queries = queries_list)\n\n# show\nprint(upset_plot)\n```\n\nsave plot\n\n```{r}\npdf(\"Figures/SurfaceComparison/core_upset.pdf\", width = 5.8, height = 4)\nupset_plot\ndev.off()\n```\n\n## 05. Get unique and core ASV info\n\n```{r}\n### get unique ASVs per mangrove system\nunique_asvs <- list()\nfor (loc in colnames(core_df)) {\n  unique_asvs[[loc]] <- rownames(core_df)[rowSums(core_df == 1) == 1 & core_df[[loc]] == 1]\n  cat(loc, \": Unique ASVs:\", length(unique_asvs[[loc]]), \"\\n\")\n  print(head(unique_asvs[[loc]], 5))  # Show first 5\n}\n#unique_asvs\n```\n\n```{r}\n# Verify taxonomy\nif (!is.null(tax_table(physeq_qiime3))) {\n  tax_table_df <- as.data.frame(tax_table(physeq_qiime3))\n\n  # Get taxonomy function\n  get_taxonomy <- function(asv_list) {\n    if (length(asv_list) > 0) {\n      taxonomy <- tax_table_df[asv_list, , drop = FALSE]\n      return(taxonomy)\n    } else {\n      return(NULL)\n    }\n  }\n\n  # Get taxonomy\n  taxonomy_unique <- lapply(unique_asvs, get_taxonomy)\n\n  # show first 5  unique ASVs\n  for (loc in names(taxonomy_unique)) {\n    cat(\"\\nFirst unique ASVs taxonomy\", loc, \":\\n\")\n    if (!is.null(taxonomy_unique[[loc]])) {\n      print(head(taxonomy_unique[[loc]], 5))\n    } else {\n      cat(\"There are no unique ASV to\", loc, \"\\n\")\n    }\n  }\n} else {\n  cat(\"Please import taxonomy.\\n\")\n}\n\n# Confirm the total number of unique ASVs\nlapply(taxonomy_unique, function(x) if (!is.null(x)) nrow(x) else 0)\n```\n\nGet taxonomy\n\nPhylum level\n\n```{r}\n# Create a list to store unique asv to Phylum level\nphylum_unique <- list()\n\n# Iterate on each Mangrove system\nfor (loc in names(taxonomy_unique)) {\n  if (!is.null(taxonomy_unique[[loc]])) {\n    # Extract taxonomy phylum\n    tax_df <- taxonomy_unique[[loc]]\n    if (\"Phylum\" %in% colnames(tax_df)) {\n      phylum <- tax_df$Phylum\n      phylum <- phylum[!is.na(phylum)]  # Exclude NA\n      phylum_unique[[loc]] <- unique(phylum)\n    } else {\n      cat(\"Phylum is not available to\", loc, \"\\n\")\n      phylum_unique[[loc]] <- character(0)\n    }\n  } else {\n    phylum_unique[[loc]] <- character(0)\n  }\n}\n\n# Identify exclusive phylum for Mangrove system\nall_phylums <- unique(unlist(phylum_unique))\nphylum_exclusive <- list()\nfor (loc in names(phylum_unique)) {\n  other_locations <- setdiff(names(phylum_unique), loc)\n  other_phylum <- unique(unlist(phylum_unique[other_locations]))\n  exclusive_phylum <- setdiff(phylum_unique[[loc]], other_phylum)\n  phylum_exclusive[[loc]] <- exclusive_phylum\n  cat(\"Exclusive phylum in\", loc, \":\", length(exclusive_phylum), \"\\n\")\n  if (length(exclusive_phylum) > 0) {\n    print(exclusive_phylum)\n  } else {\n    cat(\"There are not exclusive phylum.\\n\")\n  }\n}\n```\n\nFamily level\n\n```{r}\n# Create a list to store unique asv to specific taxonomy level\nfamilies_unique <- list()\n\n# Iterate on each Mangrove system\nfor (loc in names(taxonomy_unique)) {\n  if (!is.null(taxonomy_unique[[loc]])) {\n    # Extract taxonomy families\n    tax_df <- taxonomy_unique[[loc]]\n    if (\"Family\" %in% colnames(tax_df)) {\n      families <- tax_df$Family\n      families <- families[!is.na(families)]  # Exclude NA\n      families_unique[[loc]] <- unique(families)\n    } else {\n      cat(\"Family is not available to\", loc, \"\\n\")\n      families_unique[[loc]] <- character(0)\n    }\n  } else {\n    families_unique[[loc]] <- character(0)\n  }\n}\n\n# Identify exclusive family for Mangrove system\nall_families <- unique(unlist(families_unique))\nfamilies_exclusive <- list()\nfor (loc in names(families_unique)) {\n  other_locations <- setdiff(names(families_unique), loc)\n  other_families <- unique(unlist(families_unique[other_locations]))\n  exclusive_families <- setdiff(families_unique[[loc]], other_families)\n  families_exclusive[[loc]] <- exclusive_families\n  cat(\"Exclusive family in\", loc, \":\", length(exclusive_families), \"\\n\")\n  if (length(exclusive_families) > 0) {\n    print(exclusive_families)\n  } else {\n    cat(\"There are not exclusive family.\\n\")\n  }\n}\n```\n\nGet core table\n\n```{r}\n# Combine taxonomy in data.frame\ntaxonomy_unique_df <- do.call(rbind, lapply(names(taxonomy_unique), function(loc) {\n  if (!is.null(taxonomy_unique[[loc]])) {\n    df <- taxonomy_unique[[loc]]\n    df$Location <- loc\n    df$ASV <- rownames(df)# add name asv column\n    return(df)\n  } else {\n    return(NULL)\n  }\n}))\n\n# Move columns\ntaxonomy_unique_df <- taxonomy_unique_df[, c(\"ASV\", \"Location\", setdiff(names(taxonomy_unique_df), c(\"ASV\", \"Location\")))]\n\n# show first rows of data.frame to verify\nprint(head(taxonomy_unique_df))\n```\n\n```{r}\n# save data.frame\nwrite.csv(taxonomy_unique_df, file = \"Tables/SurfaceComparison/unique_asvs_taxonomy.csv\", row.names = FALSE)\n```\n\n## Save rds core plot\n\n```{r}\nsaveRDS(upset_plot, \"Figures/SurfaceComparison/upset_surface_plot.rds\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"02.3.Coremicrobiome.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.37","editor":"visual","theme":{"light":["cosmo","theme.scss"],"dark":["cosmo","theme-dark.scss"]},"mainfont":"Atkinson Hyperlegible","code-copy":true,"anchor-sections":true,"footnotes-hover":false,"title":"Core microbiome"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}